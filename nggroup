#!/bin/bash


# TODO: need to do *all* validation
# TODO: case statements have a default case

debug() { echo "$@" 1>&2; }

if [ -n "$_IN_PRODUCTION" ]; 
then
    HTPASS_DIR=/etc/nginx/htpasswd
else
    HTPASS_DIR=.
fi

SITES_DIR=$HTPASS_DIR/sites
SITES_DIR_FORMAT="$SITES_DIR/.%s.rules"
USER_DIR=$HTPASS_DIR/users
USER_DIR_FORMAT="$USER_DIR/%s"
USER_RULE_FORMAT="%s"
GROUP_DIR=$HTPASS_DIR/groups
GROUP_DIR_FORMAT="$GROUP_DIR/%s"
GROUP_RULE_FORMAT="@%s"
TMP_FILE=/tmp/nggrouptmp

if [ -n "$_IN_PRODUCTION" ] && [ "$(id -u)" != "0" ];
then
    echo "Error; Must run as root."
    exit 1
fi


mkdir -p $HTPASS_DIR
mkdir -p $SITES_DIR
mkdir -p $USER_DIR
mkdir -p $GROUP_DIR


site () {
    local site_file
    site_file=$(printf $SITES_DIR_FORMAT $2)
    case $1 in
	siteadd )
	    if [ -e $site_file ];
	    then
		echo "Error: Site already exists."
		exit 1
	    fi
	    touch $site_file
	    ;;
	sitedel )
	    if [ ! -e $site_file ];
	    then
		echo "Error: Site does not exist."
		exit 1
	    fi
	    rm $site_file
	    ;;
	sitemod )
	    mod_funct $site_file $3 $4 "Site"
	    ;;
    esac
}

user () {
    local file
    file=$(printf $USER_DIR_FORMAT $2)
    
    case $1 in
	useradd )
	    contents=$(htpasswd -nb $2 $3)
	    if [ -e $file ];
	    then
		echo "Error: user already exists."
		exit 1
	    fi

	    echo $contents > $file
	    ;;
	userdel )
	    if [ ! -e $file ];
	    then
		echo "Error: User does not exist."
		exit 1
	    fi

	    rm $file
    esac
}

group () {
    local group_file
    group_file=$(printf $GROUP_DIR_FORMAT $2)
    
    case $1 in
	groupadd )
	    if [ -e $group_file ];
	    then
		echo "Error: group already exists."
		exit 1
	    fi

	    touch $group_file
	    ;;
	groupdel )
	    if [ ! -e $group_file ];
	    then
		echo "Error: Group does not exist."
		exit 1
	    fi

	    rm $group_file
	    ;;
	groupmod )
	    mod_funct $group_file $3 $4 "Group"
	    ;;
    esac
}


mod_funct () {
    if [ ! -e $1 ];
    then
	printf "Error: %s does not exist\n" $4
	exit 1
    fi

    local context
    local context_file
    local context_dir_format
    local context_rule_format
    local context_friendly
    local context_in_file_search

    context=$(echo $3 | cut -c 2-)

    case $3 in
	u* )
	    context_dir_format=$USER_DIR_FORMAT
	    context_rule_format=$USER_RULE_FORMAT
	    context_friendly=User
	    context_in_file_search=$context
	    ;;
	g* )
	    context_dir_format=$GROUP_DIR_FORMAT
	    context_rule_format=$GROUP_RULE_FORMAT
	    context_friendly=Group
	    context_in_file_search="@$context"
	    ;;
    esac

    context_file=$(printf $context_dir_format $context)
    context_insert=$(printf $context_rule_format $context)

    if [ ! -e $context_file ];
    then
	printf "Error: %s does not exist.\n" $context_friendly
	exit 1
    fi

    # TODO: make sure all greps are strict!
    grep "^$context_in_file_search$" $1 > /dev/null
    context_in_file=$?

    case $2 in
	a )
	    if [ 0 -eq $context_in_file ];
	    then
		printf "Error: %s is already part of the group.\n" $context_friendly
		exit 1
	    else
		echo $context_insert >> $1
	    fi
	    ;;
	d )
	    if [ 0 -eq $context_in_file ];
	    then
		sed -i /^$context_insert$/d $1
	    else
		printf "Error: %s does not exist in the group.\n" $context_friendly
		exit 1
	    fi
	    ;;
    esac

}

generate_sites () {
    for rule_file in $SITES_DIR/.*.rules;
    do
	debug $rule_file

	local site_file_insert
	local site_name
	local site_file_path

	site_name=$(echo $rule_file  | sed 's/.*\.\(.*\)\..*/\1/g')
	site_file_path=$SITES_DIR/$site_name
	site_file_tmp_path=$site_file_path.tmp

	[ -e $site_file_tmp_path ] && rm $site_file_tmp_path

	while read -r line
	do
	    local user_list

	    case $(echo $line | cut -c 1) in
		@ )
		    group_name=$(echo $line | cut -c 2-)
		    user_list=$(cat $GROUP_DIR/$group_name)
		    echo "# @$group_name" >> $site_file_tmp_path
		    ;;
		* )
		    echo "# $line" >> $site_file_tmp_path
		    user_list=$line
		    ;;
	    esac

	    for user in $user_list
	    do
		cat $USER_DIR/$user >> $site_file_tmp_path
	    done

	done < $rule_file

	# if we don't have a previous version, or if they're different,
	#  we prioritise the newly generated file
	if [ ! -e $site_file_path ] || ! diff $site_file_path $site_file_tmp_path > /dev/null;
	then
	    mv $site_file_tmp_path $site_file_path
	fi
    done

}


case $1 in
    site* )
	site $@
	;;

    user* )
	user $@
	;;

    group* )
	group $@
	;;
    generate )
	generate_sites
	;;
esac

