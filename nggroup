#!/usr/bin/env bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

. "$DIR/config"

usage () {
	 >&2 echo "nggroup usage:"
		 >&2 echo -e "\t\`nggroup site(add|del) <sitename>\`"
		 >&2 echo -e "\t\`nggroup sitemod <sitename> (+|-)<user>\`"
		 >&2 echo -e "\t\`nggroup sitemod <sitename> (+|-)@<group>\`"
		 >&2 echo -e "\t\`nggroup group(add|del) <groupname>\`"
		 >&2 echo -e "\t\`nggroup groupmod <groupname> (+|-)<user>\`"
		 >&2 echo -e "\t\`nggroup useradd <username> <password> <email_address> <full_name>\`"
		 >&2 echo -e "\t\`nggroup userdel <username>\`"
		 >&2 echo -e "\t\`nggroup generate\`"
		 >&2 echo    "For examples of usage, please see README.md"
	exit 1
}

site () {
	isset "$2" "No site supplied" || usage

	local site_file=$(get_site_rule_path "$2")
	case "$1" in
	siteadd )
		[ -e "$site_file" ] && die "Site already exists."
		touch "$site_file"
		;;
	sitedel )
		[ ! -e "$site_file" ] && die "Site does not exist."
		rm "$site_file"
		;;
	sitemod )
		isset "$3" "No modification supplied" || usage
		mod_funct "$site_file" "$3" "Site"
		;;
	esac
}

user () {
	isset "$2" "No user supplied" || usage

	local rules_file
	local generated_file
	rules_file=$(get_user_rule_path "$2")
	generated_file=$(get_user_complete_path "$2")

	case $1 in
	useradd )
		[ -e "$rules_file" ] && die "user already exists."

		any_errors=false
		isset "$2" "Username is blank" || any_errors=true
		isset "$3" "Password is blank" || any_errors=true
		isset "$4" "Email is blank" || any_errors=true
		isset "$5" "Name is blank" || any_errors=true

		# username, password, email, name
		if $any_errors;
		then
			usage
		else
			password=$(htpasswd -nb "$2" "$3" | cut -f2 -d:)
			csv "$2" "$password" "$4" "$5" > "$rules_file"
		fi
		;;

	userdel )
		del_funct "$2" "User"
		;;
	esac
}

group () {
	isset "$2" "No group supplied" || usage

	local group_file
	group_file=$(get_group_rule_path "$2")
	case $1 in
	groupadd )
		[ -e "$group_file" ] && die "Group already exists."
		touch "$group_file"
		;;
	groupdel )
		del_funct "@$2" "Group"
		;;

	groupmod )
		isset "$3" "No modification supplied" || usage
		mod_funct "$group_file" "$3" "Group"
		;;
	esac
}

del_funct () {
	local is_group
	local context
	local context_file

	if [ "$(echo $1 | cut -c 1)" == "@" ];
	then
		is_group=true
		context="$(echo $1 | cut -c 2-)"
		context_file=$(get_group_rule_path $context)
	else
		is_group=false
		context="$(echo $1 | cut -c 1-)"
		context_file=$(get_user_rule_path $context)
	fi

	[ ! -e "$context_file" ] && die "$2 ($context_file) does not exist"

	local context_regex_search
	if $is_group;
	then
		context_regex_search=$(get_group_rule_entry $context)
	else
		context_regex_search=$(get_user_rule_entry $context)
	fi

	local context_format_regex="^$context_regex_search\$"

	for file_to_remove_from in $(grep -lR $group_format_regex "$(get_group_rule_path '*')" "$(get_site_rule_path '*')" 2> /dev/null);
	do
		sed -i "/$group_format_regex/d" "$file_to_remove_from"
	done

	rm $context_file
}

# a shared function for performing (site|group)mod
mod_funct () {
	local is_group
	local context
	local context_friendly=$3

	if [ "$(echo $2 | cut -c 2)" == "@" ];
	then
		is_group=true
		context="$(echo $2 | cut -c 3-)"
	else
		is_group=false
		context="$(echo $2 | cut -c 2-)"
	fi

	if $is_group && [ "$context" == "all" ];
	then
		for user_path in $(ls $USER_DIR/*);
		do
			echo $(basename $user_path) >> "$1"
		done
		return
	fi

	[ ! -e "$1" ] && die $(printf "%s does not exist\n" "$3")

	local context_dir_format
	local context_rule_format
	local context_file
	local context_insert

	if $is_group;
	then
		context_file=$(get_group_rule_path $context)
		context_insert=$(get_group_rule_entry $context)
	else
		context_file=$(get_user_rule_path $context)
		context_insert=$(get_user_rule_entry $context)
	fi

	[ ! -e "$context_file" ] && die $(printf "%s does not exist.\n" "$context_friendly")

	local context_in_file=true
	grep "^$context_insert$" "$1" > /dev/null || context_in_file=false

	if [ "$(echo "$2" | cut -c 1)" == "+" ];
	then
		if $context_in_file;
		then
			die $(printf "%s is already part of the group.\n" $context_friendly)
		else
			echo "$context_insert" >> "$1"
		fi
	else
		if $context_in_file;
		then
			sed -i "/^$context_insert$/d" "$1"
		else
			die $(printf "%s does not exist in the group.\n" $context_friendly)
		fi
	fi
}

generate () {
	case "$1" in
	users )
		generate_users
		;;
	sites )
		generate_sites
		;;
	"" )
		generate "users"
		generate "sites"
		;;
	* )
		usage
		;;
	esac
}

generate_users () {
	for user_rule_file in $(get_user_rule_path "*");
	do
		username=$(cat $user_rule_file | cut -f1 -d,)
		user_out_file=$(get_user_complete_path "$username")
		user_password=$(cat $user_rule_file | cut -f2 -d,)
		echo "$username:$user_password" > $user_out_file
	done
}

generate_sites () {
	for rule_file in $(get_site_rule_path "*");
	do
		local site_file_insert
		local site_name
		local site_file_path

		# grab out the nice name from the format string that is
		#  created from `get_site_rule_path`
		site_name=$(echo "$rule_file"  | sed 's/.*\.\(.*\)\..*/\1/g')
		site_file_path=$(get_site_complete_path "$site_name")
		site_file_tmp_path=$site_file_path.tmp

		# truncate the temporary file
		#  optimisation via http://stackoverflow.com/a/13576390
		> "$site_file_tmp_path"

		local expanded_users=""
		local groups_to_expand=""
		local groups_expanded=""

		# first go through rule file, and make note of groups and users
		while read -r line
		do
			if [ "$(echo "$line" | cut -c 1)" == "@" ];
			then
				groups_to_expand+="$line "
			else
				expanded_users+="$line "
			fi
		done < "$rule_file"
		while true;
		do
			# take the head of the list
			local group=$(echo "$groups_to_expand" | cut -f1 -d" ")
			# and remove the head from the remainder of the list
			groups_to_expand=$(echo "$groups_to_expand" | cut -f2- -d" ")
			# if we have a null group - where a site is empty
			[ -z "$group" ] && break

			# remove the @ sign from the group
			local group_name=$(echo $group | cut -c 2-)
			local group_file=$(get_group_rule_path "$group_name")
			local member_list=$(cat "$group_file")

			for member in $member_list;
			do
				if [ "$(echo $member | cut -c 1)" == "@" ];
				then
					# make sure we don't keep re-expanding - infinite recursion
					if [[ ! "$groups_expanded" =~ "$member " ]];
					then
						groups_to_expand+="$member "
					fi
				else
					expanded_users+="$member "
				fi
			done

			# make note so next time we don't try to re-expand it
			groups_expanded+="$group "
			# if:
			#  our remainder is empty
			#  or if the /whole/ remainder is the same group we're currently
			# then we don't need to carry on expanding
			if [ -z "$groups_to_expand" ] || [ "$groups_to_expand" == " " ] || [ "$group" == "$groups_to_expand" ];
			then
				break
			fi
		done


		# finally grab all the users we have, make sure we only have one of each
		#  and then output their files into our temporary site
		final_users=$(echo "$expanded_users" | sed 's/ /\n/g' | sort | uniq)
		for user in $final_users;
		do
			user_path=$(get_user_complete_path "$user")
			cat "$user_path" >> "$site_file_tmp_path"
		done

		# if we don't have a previous version, or if they're different,
		#	we prioritise the newly generated file
		if [ ! -e "$site_file_path" ] || ! diff "$site_file_path" "$site_file_tmp_path" > /dev/null;
		then
			mv "$site_file_tmp_path" "$site_file_path"
		fi
	done
}

# our main processing
case $1 in
	site* )
		site "$@"
		;;

	user* )
		user "$@"
		;;

	group* )
		group "$@"
		;;

	generate* )
		generate "$2"
		;;
	usage | * )
		usage
		;;
esac
